package available_captures_for_rook_ez

import (
	"testing"
)

var dirs = [][]int{{1, 0}, {0, -1}, {-1, 0}, {0, 1}}

// board [y][x]
func numRookCaptures(board [][]byte) (ans int) {
	n := 8
	Rx, Ry := 0, 0
	for y, row := range board {
		for x, char := range row {
			if char == 'R' {
				Rx = x
				Ry = y
			}
		}
	}

	for _, d := range dirs {
		for step := 1; step < 8; step++ {
			nx, ny := Rx+d[0]*step, Ry+d[1]*step
			if n <= nx || nx < 0 || n <= ny || ny < 0 {
				break
			}
			if board[ny][nx] == 'B' {
				break
			}
			if board[ny][nx] == 'p' {
				ans++
				break
			}
		}
	}
	return
}

func Test_available_captures_for_rook(t *testing.T) {
	tests := []struct {
		board [][]byte
	}{
		{[][]byte{
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'.', '.', '.', 'R', '.', '.', '.', 'p'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
		},
		},
		{[][]byte{
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
			{'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
			{'.', 'p', 'B', 'R', 'B', 'p', '.', '.'},
			{'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
			{'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
		},
		},
		{
			[][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'p', 'p', '.', 'R', '.', 'p', 'B', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'B', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
			},
		},
		{
			[][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'R', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
			},
		},
	}
	for _, tt := range tests {
		t.Log(numRookCaptures(tt.board))
	}
}
